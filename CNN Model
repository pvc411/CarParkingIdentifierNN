import torch
from torch.utils.data import Dataset, DataLoader
from torchvision.io import read_image
from torchvision.transforms import Compose, Resize, ToTensor
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import pandas as pd
import os
import zipfile

from google.colab import drive
drive.mount('/content/drive')

# zip file path
zip_file_path = "/content/drive/My Drive/ParkingLotDataset.zip"

# extraction directory
extract_dir = "/content/extracted"

os.makedirs(extract_dir, exist_ok=True)

# zip extraction
with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    zip_ref.extractall(extract_dir)

# listing files
extracted_files = os.listdir(extract_dir)
print("Extracted files:", extracted_files)

# dataset for carprk
class ParkingLotDataset(Dataset):
    def __init__(self, annotations_file, img_dir, transform=None):
        self.img_labels = pd.read_csv(annotations_file)
        self.img_dir = img_dir
        self.transform = transform

    def __len__(self):
        return len(self.img_labels)

    def __getitem__(self, idx):
        img_path = os.path.join(self.img_dir, self.img_labels.iloc[idx, 0])
        image = read_image(img_path)
        label = self.img_labels.iloc[idx, 1]
        if self.transform:
            image = self.transform(image)
        sample = {"image": image, "label": label}
        return sample

# CNN model
class CNN(nn.Module):
    def __init__(self):
        super(CNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=5, stride=1, padding=2)
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2, padding=0)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=5, stride=1, padding=2)
        self.fc1 = nn.Linear(64 * 187 * 250, 1000)  
        self.fc2 = nn.Linear(1000, 10)  

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 64 * 187 * 250)  
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x

# prepare dataset and dataloader
transform = Compose([
    Resize((750, 1000)),
    ToTensor()
])

# placeholder
train_dataset = ParkingLotDataset(annotations_file='/content/extracted/annotations.csv',
                                  img_dir='/content/extracted/FULL_IMAGE_1000x750',
                                  transform=transform)

train_loader = DataLoader(train_dataset, batch_size=4, shuffle=True)

# define model, loss, optimizer
model = CNN()
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)

# training loop
for epoch in range(2):  
    running_loss = 0.0
    for i, data in enumerate(train_loader, 0):
        inputs, labels = data['image'], data['label']

        optimizer.zero_grad()

        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        if i % 2000 == 1999:    
            print('[%d, %5d] loss: %.3f' %
                  (epoch + 1, i + 1, running_loss / 2000))
            running_loss = 0.0

print('Finished Training')
